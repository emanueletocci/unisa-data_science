x = 5
x = 5
library(ISRL)
install.packages("ISLR")
library(ISRL)
library("ISRL")
install.packages("ISLR")
install.packages("ISLR")
install.packages("ISLR")
library(ISRL)
install.packages("ISLR")
library(ISLR)
ISRL::Hitters
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
fix(Hitters)
install.packages("ISLR")
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
View(coef(model))                               # visualize estimate coefficients
# Manual calculating: β^=(XTX)−1XTY
X <- as.matrix(cbind(1, trainSet[, names(trainSet) != "y"]))
Y_vec <- as.matrix(trainSet$y)
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
View(coef(model))                               # visualize estimate coefficients
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))
Y_vec = as.matrix(trainSet$y)
View(Y_vec)
View(Y_vec)
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
View(coef(model))                               # visualize estimate coefficients
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y_vec
View(beta_hat)
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
coef = coef(model)                              # visualize estimate coefficients
View(coef)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y_vec
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
coef = coef(model)                              # visualize estimate coefficients
View(coef)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y_vec
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
estimate_coeff = coef(model)                              # visualize estimate coefficients
View(estimate_coeff)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y_vec
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
estimate_coeff = coef(model)                    # estimate coefficients
View(estimate_coeff)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
manual_estimate_coeff = solve(t(X) %*% X) %*% t(X) %*% Y_vec
View(manual_estimate_coeff)
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
estimate_coeff = coef(model)                    # estimate coefficients
View(estimate_coeff)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
manual_estimate_coeff = solve(t(X) %*% X) %*% t(X) %*% Y_vec
View(manual_estimate_coeff)
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
estimate_coeff = coef(model)                    # estimate coefficients
View(estimate_coeff)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
manual_estimate_coeff = solve(t(X) %*% X) %*% t(X) %*% Y_vec
View(manual_estimate_coeff)
# Comparing manual_estimate_coeff and estimate_coeff
# Prepara un data frame di confronto
compare_coeff = data.frame(
Coeff_Names = names(estimate_coeff),
lm_coef = as.numeric(estimate_coeff),
manual_coef = as.numeric(manual_estimate_coeff)
)
compare_coeff$diff = compare_coeff$lm_coef - compare_coeff$manual_coef
View(compare_coeff)    # Visualizza la tabella in RStudio
print(compare_coeff)   # Stampa in console se vuoi vedere subito le differenze
# SETUP
# install.packages("corrplot")
library(corrplot)
setwd("/Users/emanueletocci/Documents/GitHub/unisa-data_science")
dataset = read.csv("exercise_30_10.csv", header = TRUE, sep = ",")
n = nrow(dataset)
## Dataset Splitting
set.seed(42)
sample_indices = sample(1:n, size = 0.80 * n)
trainSet <- dataset[sample_indices, ]      # Create 80% training set
testSet <- dataset[-sample_indices, ]      # Create 20% test set
## a. Corr matrix
cor_matrix <- cor(trainSet)
corrplot(cor_matrix, method = "color", addCoef.col = "black", number.cex = 0.7)
# x1, x_3, x_2, x_7 are the best predictors
## b. Calculate regression model coefficients
model = lm(trainSet$y ~ ., data = trainSet)     # built coeff calcutation function
summary(model)
estimate_coeff = coef(model)                    # estimate coefficients
View(estimate_coeff)
# Manual calculating: β^=(XTX)−1XTY
X = as.matrix(cbind(1, trainSet[, grep("^x_", names(trainSet))]))   # picking (only) all predictors
Y_vec = as.matrix(trainSet$y)                                       # picking y column
manual_estimate_coeff = solve(t(X) %*% X) %*% t(X) %*% Y_vec
View(manual_estimate_coeff)
# Comparing manual_estimate_coeff and estimate_coeff
compare_coeff = data.frame(
Coeff_Names = names(estimate_coeff),
lm_coef = as.numeric(estimate_coeff),
manual_coef = as.numeric(manual_estimate_coeff)
)
compare_coeff$diff = compare_coeff$lm_coef - compare_coeff$manual_coef
View(compare_coeff)
